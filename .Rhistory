plot(datos_modif2$surface_covered, datos_modif2$price, xlab = "Superficie Cubierta", ylab = "Precio", log = 'xy')
plot(datos_modif2$fondo, datos_modif2$price, ylab = "Precio", xlab = "Fondo", log='xy')
plot(datos_modif2$tamaño_habitaciones, datos_modif2$price, xlab="Tamaño habitaciones", ylab="Precio", log='xy')
table(datos_modif2$l3, datos_modif2$property_type)
indice <- datos_modif2$property_type == "Casa" | datos_modif2$property_type == "Departamento" | datos_modif2$property_type == "Oficina" | datos_modif2$property_type == "PH"
datos_modif2 <- datos_modif2[indice, ]
boxplot(price~property_type,data=datos_modif2, outline=FALSE, las=2, cex.axis=0.7,xlab='', ylab = "Precio")
sin_depto <- datos_modif2[datos_modif2$property_type != "Departamento",]
with(sin_depto,{
barplot(table(l3,property_type), las=2, beside =TRUE,col=colores, legend=TRUE, xlim=c(0,26))
})
solo_depto <- datos_modif2[datos_modif2$property_type == "Departamento",]
with(solo_depto,{
barplot(table(l3,property_type), las=2, beside =TRUE,col=colores, legend=TRUE, xlim=c(0,10))
})
barrios <- unique(datos_modif2$l3)
precio_depto <- datos_modif2[datos_modif2$property_type=="Departamento",]
colores <- c("#0F2147", "#C2C043", "#0E6111", "#F07912", "#ED275B")
names(colores) <- barrios
plot(precio_depto$price, log='xy', col=colores[precio_depto$l3], xlim=c(50,2500), ylab = "Precio")
legend('left',
legend = barrios,
col=colores,
pch=15)
precio_depto <- datos_modif2[datos_modif2$property_type=="Departamento",]
operacion <- unique(datos_modif2$operation_type)
colores2 <- rainbow(length(operacion))
names(colores2) <- operacion
plot(precio_depto$price, log='xy', col=colores2[precio_depto$operation_type], xlim=c(50,2500), ylab = "Precio")
legend('left',
legend = operacion,
col=colores2,
pch=15)
precio_ph <- datos_modif2[datos_modif2$property_type=="PH",]
plot(precio_ph$price, log='xy', col=colores[precio_ph$l3], xlim=c(10, 350), ylab = "Precio")
legend('bottomleft',
legend = barrios,
col=colores,
pch=1)
precio_ph <- datos_modif2[datos_modif2$property_type=="PH",]
plot(precio_ph$price, log='xy', col=colores[precio_ph$l3], xlim=c(10, 350), ylab = "Precio")
legend('bottomleft',
legend = barrios,
col=colores,
pch=15)
precio_casa <- datos_modif2[datos_modif2$property_type=="Casa",]
plot(precio_casa$price, log='xy', col=colores[precio_casa$l3], ylab = "Precio")
legend('bottomleft',
legend = barrios,
col=colores,
pch=15)
propiedades <- unique(datos_modif2$property_type)
colores <- rainbow(length(propiedades))
names(colores) <- propiedades
plot(datos_modif2$surface_total, datos_modif2$price,
xlab = "Superficie total", ylab = "Precio",
xlim = c(1,2000),
log = 'xy',
col=colores[datos_modif2$property_type])
legend('left',
legend = propiedades,
col=colores,
pch=1)
propiedades <- unique(datos_modif2$property_type)
colores3 <- rainbow(length(propiedades))
names(colores3) <- propiedades
plot(datos_modif2$surface_total, datos_modif2$price,
xlab = "Superficie total", ylab = "Precio",
xlim = c(1,2000),
log = 'xy',
col=colores3[datos_modif2$property_type])
legend('left',
legend = propiedades,
col=colores3,
pch=15)
datos <- read.csv('datos_alquiler_crossvalidation.csv')
View(datos)
algunas_filas <- sample(1:nrow(datos), 10)
datos[algunas_filas,]
unique(datos$property_type)
unique(datos$rooms)
all(datos$fondo>=0)
mae <- function(observaciones, predicciones){
residuo <- observaciones - predicciones
error <- sum(abs(residuo)) / length(observaciones)
return(error)
}
pmae <- function(observaciones, predicciones){
residuo <- observaciones - predicciones
error <- sum(abs(residuo)) / sum(observaciones)
return(error)
}
modelo1 <- lm(price~surface_covered , data=datos)
modelo1
modelo2 <- lm(price~surface_covered+fondo , data=datos)
modelo2
errores <- matrix(NA, nrow = 2, ncol = 2)
colnames(errores) <- c('Superficie', 'Superficie y fondo')
rownames(errores) <- c('MAE', 'PMAE')
errores['MAE', 'Superficie'] <- mae(datos$price, predict(modelo1))
errores['PMAE', 'Superficie']<- pmae(datos$price, predict(modelo1))
errores['MAE', 'Superficie y fondo'] <- mae(datos$price, predict(modelo2))
errores['PMAE', 'Superficie y fondo'] <- pmae(datos$price, predict(modelo2))
errores
crossval <- function(dat, modelo, n_obs, fun_error, n_muestras=10){
errores_obtenidos <- c()
for (i in 1:n_muestras) {
sample_rows <- sample(1:nrow(dat), n_obs) #elijo n_obs filas
sub_datos <- dat[-sample_rows, ] #le saco esas n_obs filas
modelo2 <- lm(modelo, data=sub_datos) #armo el modelo usando la fórmula dada
depend <- as.character(modelo[[2]]) #nombre de la variable que se desea predecir
error <- fun_error(dat[sample_rows, depend], predict(modelo2, dat[sample_rows, ])) #calculo el error con los datos que habíamos sacado
errores_obtenidos <- c(errores_obtenidos, error)
}
resul <- list('errores de ajuste'= errores_obtenidos, 'promedio de errores'= mean(errores_obtenidos), 'variación de errores'= var(errores_obtenidos),'modelo usado'= modelo, 'modelo ajustado'= lm(modelo, data=dat))
return(resul)
}
resul <- crossval(datos, formula('price ~ surface_covered'), 5, pmae, 100)
resul
vector_n_obs <- seq(1,100,5) #las distintas cantidad de observaciones que usaremos
errores_obtenidos <- matrix(NA, nrow = length(vector_n_obs), ncol = 2)
colnames(errores_obtenidos) <- c('n_obs', 'Promedio error')
for (x in 1:length(vector_n_obs)) {
result <- crossval(datos, formula('price ~ surface_covered'), vector_n_obs[x], pmae, 100)
errores_obtenidos[x,1] <- vector_n_obs[x]
errores_obtenidos[x,2] <- result[['promedio de errores']]
}
errores_obtenidos
plot(errores_obtenidos[,'n_obs'], errores_obtenidos[,'Promedio error'], xlab = 'Observaciones separadas', ylab = 'Error de predicción')
N <- 1:8
info_obtenida <- matrix(NA, nrow = length(N), ncol = 3)
colnames(info_obtenida) <- c('Grado', 'Error de predicción', 'Error de ajuste')
for (x in N) {
resul_crossval <- crossval(datos, formula(paste('price~poly(fondo,', x,')')), 20, pmae, 20)
info_obtenida[x, 'Grado'] <- x
info_obtenida[x, 'Error de predicción'] <- resul_crossval[['promedio de errores']]
info_obtenida[x, 'Error de ajuste'] <- pmae(datos$price, predict(resul_crossval[['modelo ajustado']], datos))
}
info_obtenida
# Error de predicción en función del grado
plot(info_obtenida[, 'Grado'], info_obtenida[, 'Error de predicción'], xlab = 'Grado', ylab = 'Error de predicción')
plot(info_obtenida[, 'Grado'], info_obtenida[, 'Error de predicción'], ylim = c(0, 60), xlab = 'Grado', ylab = 'Error de predicción')
# Error de ajuste en función del grado
plot(info_obtenida[, 'Grado'], info_obtenida[, 'Error de ajuste'], xlab = 'Grado', ylab = 'Error de ajuste')
comparemos <- matrix(NA, nrow = 3, ncol = 3)
colnames(comparemos) <- c('Modelo', 'Error de predicción', 'Error de ajuste')
comparemos[, 'Modelo'] <- c('Superficie', 'Fondo', 'Superficie y Fondo')
modelo_sup <- crossval(datos, formula('price ~ surface_covered'), 20, pmae, 100)
modelo_fondo <- crossval(datos, formula('price ~ fondo'), 20, pmae, 100)
modelo_sup_y_fondo <- crossval(datos, formula('price ~ surface_covered+fondo'), 20, pmae, 100)
comparemos[1, 'Error de predicción'] <- modelo_sup[['promedio de errores']]
comparemos[2, 'Error de predicción'] <- modelo_fondo[['promedio de errores']]
comparemos[3, 'Error de predicción'] <- modelo_sup_y_fondo[['promedio de errores']]
comparemos[1, 'Error de ajuste'] <- pmae(datos$price, predict(modelo_sup[['modelo ajustado']], datos))
comparemos[2, 'Error de ajuste'] <- pmae(datos$price, predict(modelo_fondo[['modelo ajustado']], datos))
comparemos[3, 'Error de ajuste'] <- pmae(datos$price, predict(modelo_sup_y_fondo[['modelo ajustado']], datos))
comparemos
# Superficie
modelo_sup[['variación de errores']]**0.5
# Superficie y fondo
modelo_sup_y_fondo[['variación de errores']]**0.5
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 16, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
length(variables)
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
posibles_modelos
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
# crossval(datos, formula('price ~ surface_covered'), 20, pmae, 100)
posibles_modelos <- matrix(NA, nrow = 16, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Tipo de propiedad', 'Ubicación', 'Sup cubierta|Fondo', 'Tipo de prop|Sup cubierta', 'Tipo de prop|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Tipo de prop|Ubicación', 'Tipo de prop|Fondo|Ubicación', 'Tipo de prop|Sup cubierta|Fondo', 'Tipo de prop|Sup cubierta|Ubicación', 'Ubicación|Fondo|Sup cubierta', 'Tipo de prop|Sup cubierta|Fondo|Ubicación')
variables <- c('1', 'surface_covered', 'fondo', 'property_type', 'lat + lon', 'surface_covered + fondo', 'property_type + surface_covered', 'property_type + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'property_type + lat + lon', 'property_type + fondo + lat + lon', 'property_type + surface_covered + fondo', 'property_type + surface_covered + lat + lon', 'lat + lon + fondo + surface_covered', 'property_type + surface_covered + fondo + lat + lon')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
lm(price~property_type, data=datos)
# crossval(datos, formula('price ~ surface_covered'), 20, pmae, 100)
posibles_modelos <- matrix(NA, nrow = 16, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Tipo de propiedad', 'Ubicación', 'Sup cubierta|Fondo', 'Tipo de prop|Sup cubierta', 'Tipo de prop|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Tipo de prop|Ubicación', 'Tipo de prop|Fondo|Ubicación', 'Tipo de prop|Sup cubierta|Fondo', 'Tipo de prop|Sup cubierta|Ubicación', 'Ubicación|Fondo|Sup cubierta', 'Tipo de prop|Sup cubierta|Fondo|Ubicación')
variables <- c('1', 'surface_covered', 'fondo', 'property_type', 'lat + lon', 'surface_covered + fondo', 'property_type + surface_covered', 'property_type + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'property_type + lat + lon', 'property_type + fondo + lat + lon', 'property_type + surface_covered + fondo', 'property_type + surface_covered + lat + lon', 'lat + lon + fondo + surface_covered', 'property_type + surface_covered + fondo + lat + lon')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
}
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
prueba <- lm(price~propery_type, data = datos)
prueba <- lm(price~propety_type, data = datos)
prueba <- lm(price~property_type, data = datos)
pmae(datos$price, predict(prueba))
pmae(datos$price, predict(prueba, datos[1:10, 'price']))
pmae(datos$price, predict(prueba, datos[1:10, ]))
# crossval(datos, formula('price ~ surface_covered'), 20, pmae, 100)
posibles_modelos <- matrix(NA, nrow = 16, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Tipo de propiedad', 'Ubicación', 'Sup cubierta|Fondo', 'Tipo de prop|Sup cubierta', 'Tipo de prop|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Tipo de prop|Ubicación', 'Tipo de prop|Fondo|Ubicación', 'Tipo de prop|Sup cubierta|Fondo', 'Tipo de prop|Sup cubierta|Ubicación', 'Ubicación|Fondo|Sup cubierta', 'Tipo de prop|Sup cubierta|Fondo|Ubicación')
variables <- c('1', 'surface_covered', 'fondo', 'property_type', 'lat + lon', 'surface_covered + fondo', 'property_type + surface_covered', 'property_type + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'property_type + lat + lon', 'property_type + fondo + lat + lon', 'property_type + surface_covered + fondo', 'property_type + surface_covered + lat + lon', 'lat + lon + fondo + surface_covered', 'property_type + surface_covered + fondo + lat + lon')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
?contrasts
crossval(datos, formula('price ~ property_type'), 20, pmae, 20)
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de predicción']), ]
posibles_modelos[order(posibles_modelos[,'Error de ajuste']), ]
#Vamos a ver  si funcionan todos los que no incluyen property_type
posibles_modelos <-  matrix(NA, nrow = 8, ncol = 5)
colnames(posibles_modelos) <- c('Modelos', 'N° de variables', 'Error de ajuste', 'Error de predicción', 'Varianza')
posibles_modelos[, 'Modelos'] <- c('Cte', 'Superficie cubierta', 'Fondo', 'Ubicación', 'Sup cubierta|Fondo', 'Ubicación|Sup cubierta', 'Ubicación|Fondo', 'Ubicación|Fondo|Sup cubierta')
variables <- c('1', 'surface_covered', 'fondo', 'lat + lon', 'surface_covered + fondo', 'lat + lon + surface_covered', 'lat + lon + fondo', 'lat + lon + fondo + surface_covered')
for (y in 1:length(variables)) {
resultado <- crossval(datos, formula(paste('price ~',variables[y])), 20, pmae, 20)
posibles_modelos[y, 'N° de variables'] <- length(coef(resultado[['modelo ajustado']])) - 1
posibles_modelos[y, 'Error de ajuste'] <- pmae(datos$price, predict(resultado[['modelo ajustado']], datos))
posibles_modelos[y, 'Error de predicción'] <- resultado[['promedio de errores']]
posibles_modelos[y, 'Varianza'] <- resultado[['variación de errores']]
}
posibles_modelos
posibles_modelos[order(posibles_modelos[,'Error de ajuste']), ]
table(datos_modif$l3,datos_modif$rooms)
datos <- read.csv('ar_properties.csv',stringsAsFactors = FALSE)
indices <- (datos$l3=='Boedo' | datos$l3=='Colegiales' | datos$l3=='Centro / Microcentro'| datos$l3=='Mataderos'| datos$l3=='Puerto Madero') & !is.na(datos$l3)
datos_modif <- datos[indices,]
View(datos_modif)
indices2 <- !is.na(datos_modif$surface_total) & !is.na(datos_modif$surface_covered) & !is.na(datos_modif$rooms)
datos_modif <- datos_modif[indices2, ]
View(datos_modif)
barrios <- unique(datos_modif$l3)
cant_por_barrio <- matrix(NA, nrow = length(barrios), ncol=2)
colnames(cant_por_barrio) <- c('Barrio', 'Propidades')
for (x in 1:length(barrios)) {
total_prop <- length( datos_modif[datos_modif$l3 == barrios[x],]$l3 )
cant_por_barrio[x,'Barrio'] <- barrios[x]
cant_por_barrio[x,'Propidades'] <- total_prop
}
print(cant_por_barrio)
colores <- c("#F07912", "#0E6111", "#C2C043", "#ED275B", "#0F2147")
barplot(table(datos_modif$l3,datos_modif$rooms), las=2, legend=TRUE, beside =TRUE, col=colores, xlab='Número de habitaciones')
able(datos_modif$l3,datos_modif$rooms)
table(datos_modif$l3,datos_modif$rooms)
prop.table(hab_por_prop, 1)
prop.table(hab_por_prop, 1)[, 1:7]*100
hab_por_prop <- table(datos_modif$l3,datos_modif$rooms)
prop.table(hab_por_prop, 1)
prop.table(hab_por_prop, 1)[, 1:7]*100
hab_por_prop <- table(datos_modif$l3,datos_modif$rooms)
colores <- c("#F07912", "#0E6111", "#C2C043", "#ED275B", "#0F2147")
barplot(prop.table(hab_por_prop, 1)[, 1:7]*100, legend=TRUE, beside =TRUE, col=colores, xlab='Número de habitaciones', ylab = 'Frecuencia porcentual')
setwd("~/Sol/Curriculum/final-labodatos-main/final-labodatos-main")
library('rgl')
datos <- read.csv('chicos.csv')
algunas_filas <- sample(1:nrow(datos), 10)
datos[algunas_filas,]
obligatorios <- c('WEIGHT', 'STATURE', 'SEX', 'RACE', 'AGE.IN.MONTHS')
escogidos <- c('ELBOW.HAND.LENGTH', 'HEAD.BREADTH', 'FOOT.LENGTH', 'FOOT.BREADTH', 'SPHYRION.HEIGHT')
datos$WEIGHT <- datos$WEIGHT / 10
datos$AGE <- datos$AGE.IN.MONTHS / 12
datos$STATURE <- datos$STATURE / 10
datos[, escogidos] <- datos[, escogidos] / 10
head(datos[, c(obligatorios, escogidos)])
datos[datos == 0] <- NA
datos <- datos[!is.na(datos$AGE),]
summary(datos[, escogidos])
apply(datos[, escogidos], 2, function(x) sum(is.na(x)))
datos$SEX <- factor(datos$SEX, labels = c('masculino', 'femenino'))
datos$RACE <- factor(datos$RACE, labels = c('white', 'black', 'oriental', 'am. indian', 'mixed'))
layout(t(c(1,2,2)))
boxplot(STATURE ~ SEX, data = datos, ylim = range(datos$STATURE, na.rm = TRUE), xlab = 'Sexo', ylab = 'Estatura (cm)', main = 'Boxplot de estatura según sexo')
boxplot(STATURE ~ RACE, data = datos, ylim = range(datos$STATURE, na.rm = TRUE), xlab = 'Raza', ylab = 'Estatura (cm)', main = 'Boxplot de estatura según raza')
text(1:length(levels(datos$RACE)), range(datos$STATURE, na.rm = TRUE)[2] + 0.2, paste('n =', table(datos$RACE)))
normalizar <- function(vec){
return((vec - min(vec)) / (max(vec) - min(vec)))
}
STATURE_norm <- normalizar(datos[!is.na(datos$STATURE), 'STATURE'])
AGE_norm <- normalizar(datos[datos$AGE, 'AGE'])
plot(WEIGHT ~ AGE, datos, col = rgb(STATURE_norm, 0, 1 - STATURE_norm), pch = 4, xlab = 'Edad', ylab = 'Peso (kg)', main = 'Peso en función de la edad')
legend('topleft', legend = c('más alto', 'menos alto'), col = c('red', 'blue'), pch = 4)
coplot(STATURE ~ AGE | RACE + SEX, datos, rows = 1, xlab = c('Edad', 'Raza'),
ylab = c('Estatura (cm)', 'Sexo'))
col_sex <- c('green', 'magenta')
names(col_sex) <- levels(datos$SEX)
plot(WEIGHT ~ AGE, datos, col = col_sex[datos$SEX], pch = 4, xlab = 'Edad', ylab = 'Peso (kg)', main = 'Peso en función de la edad')
legend('topleft', legend = levels(datos$SEX), col = col_sex, pch = 4)
plot(WEIGHT ~ STATURE, datos,
col = col_sex[datos$SEX],
pch = 4, xlab = 'Estatura (cm)', ylab = 'Peso en escala logarítmica (kg)', log='y', main = 'Peso en función de la estatura')
legend('topleft', legend = levels(datos$SEX), col = col_sex, pch = 4)
modelo_edadf <- lm(WEIGHT~AGE, data=datos[datos$SEX=='femenino', ])
modelo_edadf
modelo_edadm <- lm(WEIGHT~AGE, data=datos[datos$SEX=='masculino', ])
modelo_edadm
modelo_edadf2 <- lm(WEIGHT~poly(AGE, 2), data=datos[datos$SEX=='femenino', ])
modelo_edadf2
modelo_edadm2 <- lm(WEIGHT~poly(AGE, 2), data=datos[datos$SEX=='masculino', ])
modelo_edadm2
plot(WEIGHT ~ AGE, datos, col = col_sex[datos$SEX], pch = 4, xlab = 'Edad', ylab = 'Peso (kg)', main = 'Edad en función del peso con los modelos')
legend('bottomright', legend = levels(datos$SEX), col = col_sex, pch = 4)
abline(modelo_edadf, col = '#6F00E6', lwd=2)
abline(modelo_edadm, lwd=2)
lines(1:20, predict(modelo_edadf2, newdata = data.frame('AGE' = 1:20)), col = '#6F00E6', lwd=2, lty=2)
lines(1:20, predict(modelo_edadm2, newdata = data.frame('AGE' = 1:20)), lwd=2, lty=2)
legend('topleft', legend= c('masculino lineal','femenino lineal', 'masculino cuadrático', 'femenino cuadrático'), col = c('black', '#6F00E6', 'black', '#6F00E6'), lty = c(1, 1, 2, 2), lwd = 3)
MAE <- function(x, y) {
return(sum(abs(x - y)) / length(x))
}
PMAE <- function(x, y) {
return(sum(abs(x - y)) / sum(x))
}
crossval <- function(datos, formu, n_obs, fun_error, n_muestras = 1) {
errores <- NULL
for (i in 1:n_muestras) {
samp_ev <- sample(1:nrow(datos), n_obs)
modelo <- lm(formu, data = datos[-samp_ev,])
error <- fun_error(predict(modelo, datos[samp_ev,]), datos[samp_ev, toString(formu[[2]])])
errores <- c(errores, error)
}
return(list(errores = errores, promedio = mean(errores), varianza = var(errores), formula = formu, modelo = lm(formu, data = datos)))
}
error_lineal_fem <- crossval(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ], as.formula('WEIGHT ~ AGE'),0.2*nrow(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
error_lineal_masc <- crossval(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ], as.formula('WEIGHT ~ AGE'),0.2*nrow(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
error_cuadratico_fem <- crossval(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ], as.formula(paste('WEIGHT ~ poly(AGE,', 2, ')')),0.2*nrow(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
error_cuadratico_masc <- crossval(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ], as.formula(paste('WEIGHT ~ poly(AGE,', 2, ')')),0.2*nrow(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), ]) , PMAE, 100)
errores_modelos <- matrix(NA, ncol = 3, nrow = 4)
colnames(errores_modelos) <- c('Modelo', 'Error de ajuste', 'Error de predicción')
errores_modelos[,'Modelo'] <- c('Femenino Lineal', 'Masculino Lineal', 'Femenino Cuadrático', 'Masculino Cuadrático')
errores_modelos[, 'Error de ajuste'] <- c(round(PMAE(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_lineal_fem$modelo)), 4), round(PMAE(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_lineal_masc$modelo)), 4), round(PMAE(datos[datos$SEX == 'femenino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_cuadratico_fem$modelo)), 4), round(PMAE(datos[datos$SEX == 'masculino' & !is.na(datos$WEIGHT), 'WEIGHT'], predict(error_cuadratico_masc$modelo)),4) )
errores_modelos[, 'Error de predicción'] <- c(round(error_lineal_fem$promedio, 4), round(error_lineal_masc$promedio, 4), round(error_cuadratico_fem$promedio, 4), round(error_cuadratico_masc$promedio, 4))
as.data.frame(errores_modelos)
plot3d(WEIGHT~AGE+STATURE, data=datos, col = col_sex[datos$SEX], xlab = 'Edad', ylab  = 'Estatura (cm)', zlab = 'Peso (kg)')
rglwidget()
options(rgl.printRglwidget = TRUE)
